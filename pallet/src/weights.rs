
//! Autogenerated weights for `pallet_pendulum_amm`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-10, STEPS: `100`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/pendulum-test-node
// benchmark
// --chain
// dev
// --pallet
// pallet_pendulum_amm
// --extrinsic
// *
// --steps
// 100
// --repeat
// 50
// --output
// ./

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_pendulum_amm`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	// Storage: AmmEURUSDC FeeToSetter (r:1 w:0)
	// Storage: AmmEURUSDC FeeTo (r:0 w:1)
	fn set_fee_to() -> Weight {
		(5_148_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: AmmEURUSDC PalletAccountId (r:1 w:0)
	// Storage: AmmEURUSDC Reserves (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:0)
	fn skim() -> Weight {
		(16_809_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
	}
	// Storage: AmmEURUSDC PalletAccountId (r:1 w:0)
	// Storage: AmmEURUSDC Reserves (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: AmmEURUSDC Price0CumulativeLast (r:1 w:1)
	// Storage: AmmEURUSDC Price1CumulativeLast (r:1 w:1)
	fn sync() -> Weight {
		(36_359_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: AmmEURUSDC PalletAccountId (r:1 w:0)
	// Storage: AmmEURUSDC Reserves (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:1)
	// Storage: AmmEURUSDC KLast (r:1 w:0)
	// Storage: AmmEURUSDC FeeTo (r:1 w:0)
	// Storage: AmmEURUSDC TotalSupply (r:1 w:1)
	// Storage: AmmEURUSDC AddressZero (r:1 w:0)
	// Storage: AmmEURUSDC LpBalances (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	fn deposit_asset_1() -> Weight {
		(131_333_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: AmmEURUSDC PalletAccountId (r:1 w:0)
	// Storage: AmmEURUSDC Reserves (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:1)
	// Storage: AmmEURUSDC KLast (r:1 w:0)
	// Storage: AmmEURUSDC FeeTo (r:1 w:0)
	// Storage: AmmEURUSDC TotalSupply (r:1 w:1)
	// Storage: AmmEURUSDC AddressZero (r:1 w:0)
	// Storage: AmmEURUSDC LpBalances (r:2 w:2)
	// Storage: Timestamp Now (r:1 w:0)
	fn deposit_asset_2() -> Weight {
		(138_123_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: AmmEURUSDC PalletAccountId (r:1 w:0)
	// Storage: AmmEURUSDC TotalSupply (r:1 w:1)
	// Storage: AmmEURUSDC LpBalances (r:2 w:2)
	// Storage: AmmEURUSDC Reserves (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: AmmEURUSDC KLast (r:1 w:1)
	// Storage: AmmEURUSDC FeeTo (r:1 w:0)
	// Storage: System Account (r:1 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn withdraw() -> Weight {
		(137_320_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(9 as Weight))
	}
	// Storage: AmmEURUSDC PalletAccountId (r:1 w:0)
	// Storage: AmmEURUSDC Reserves (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn swap_asset_1_for_asset_2() -> Weight {
		(106_882_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: AmmEURUSDC PalletAccountId (r:1 w:0)
	// Storage: AmmEURUSDC Reserves (r:1 w:1)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:0)
	// Storage: Timestamp Now (r:1 w:0)
	fn swap_asset_2_for_asset_1() -> Weight {
		(106_573_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
}
